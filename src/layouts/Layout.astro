---
import { Header } from '@/components/Header';
import { AVATAR_URL } from "@/script/constants";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const url = Astro.url;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href={`${AVATAR_URL}?size=32`} />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content={description} />

		<meta property="og:type" content="website" />
		<meta property="og:url" content={url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={AVATAR_URL} />

		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={AVATAR_URL} />

		<link
			rel="preload"
			href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap"
			as="style"
		/>
		<link
			href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap"
			rel="stylesheet"
		/>
	</head>
	<body>
		<div class="h-screen overflow-y-scroll hide-scrollbar relative">
			<div class="fixed top-8 left-1/2 transform -translate-x-1/2 z-50">
				<Header client:load />
			</div>
			<div class="pt-24">
				<slot />
			</div>
		</div>
	</body>
</html>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>